// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p15
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "DDSPerfTestTypeSupportC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "DDSPerfTestTypeSupportC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:51



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:464


#ifndef _TAO_TYPECODE_DDSPerfTest_PubMessageSeq_GUARD
#define _TAO_TYPECODE_DDSPerfTest_PubMessageSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        DDSPerfTest_PubMessageSeq_0 (
          ::CORBA::tk_sequence,
          &DDSPerfTest::_tc_PubMessage,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_DDSPerfTest_PubMessageSeq_0 =
        &DDSPerfTest_PubMessageSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_DDSPerfTest_PubMessageSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DDSPerfTest_PubMessageSeq (
    ::CORBA::tk_alias,
    "IDL:DDSPerfTest/PubMessageSeq:1.0",
    "PubMessageSeq",
    &TAO::TypeCode::tc_DDSPerfTest_PubMessageSeq_0);
  

namespace DDSPerfTest
{
  ::CORBA::TypeCode_ptr const _tc_PubMessageSeq =
    &_tao_tc_DDSPerfTest_PubMessageSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDSPerfTest::PubMessageTypeSupport.

DDSPerfTest::PubMessageTypeSupport_ptr
TAO::Objref_Traits<DDSPerfTest::PubMessageTypeSupport>::duplicate (
    DDSPerfTest::PubMessageTypeSupport_ptr p)
{
  return DDSPerfTest::PubMessageTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<DDSPerfTest::PubMessageTypeSupport>::release (
    DDSPerfTest::PubMessageTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

DDSPerfTest::PubMessageTypeSupport_ptr
TAO::Objref_Traits<DDSPerfTest::PubMessageTypeSupport>::nil (void)
{
  return DDSPerfTest::PubMessageTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDSPerfTest::PubMessageTypeSupport>::marshal (
    const DDSPerfTest::PubMessageTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDSPerfTest::PubMessageTypeSupport::PubMessageTypeSupport (void)
{}

DDSPerfTest::PubMessageTypeSupport::~PubMessageTypeSupport (void)
{
}

void
DDSPerfTest::PubMessageTypeSupport::_tao_any_destructor (void *_tao_void_pointer)
{
  PubMessageTypeSupport *_tao_tmp_pointer =
    static_cast<PubMessageTypeSupport *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

DDSPerfTest::PubMessageTypeSupport_ptr
DDSPerfTest::PubMessageTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PubMessageTypeSupport::_duplicate (
      dynamic_cast<PubMessageTypeSupport_ptr> (_tao_objref)
    );
}

DDSPerfTest::PubMessageTypeSupport_ptr
DDSPerfTest::PubMessageTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PubMessageTypeSupport::_duplicate (
      dynamic_cast<PubMessageTypeSupport_ptr> (_tao_objref)
    );
}

DDSPerfTest::PubMessageTypeSupport_ptr
DDSPerfTest::PubMessageTypeSupport::_nil (void)
{
  return 0;
}

DDSPerfTest::PubMessageTypeSupport_ptr
DDSPerfTest::PubMessageTypeSupport::_duplicate (PubMessageTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDSPerfTest::PubMessageTypeSupport::_tao_release (PubMessageTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDSPerfTest::PubMessageTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDSPerfTest/PubMessageTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDSPerfTest::PubMessageTypeSupport::_interface_repository_id (void) const
{
  return "IDL:DDSPerfTest/PubMessageTypeSupport:1.0";
}

::CORBA::Boolean
DDSPerfTest::PubMessageTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_DDSPerfTest_PubMessageTypeSupport (
    ::CORBA::tk_local_interface,
    "IDL:DDSPerfTest/PubMessageTypeSupport:1.0",
    "PubMessageTypeSupport");
  

namespace DDSPerfTest
{
  ::CORBA::TypeCode_ptr const _tc_PubMessageTypeSupport =
    &_tao_tc_DDSPerfTest_PubMessageTypeSupport;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDSPerfTest::PubMessageDataWriter.

DDSPerfTest::PubMessageDataWriter_ptr
TAO::Objref_Traits<DDSPerfTest::PubMessageDataWriter>::duplicate (
    DDSPerfTest::PubMessageDataWriter_ptr p)
{
  return DDSPerfTest::PubMessageDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<DDSPerfTest::PubMessageDataWriter>::release (
    DDSPerfTest::PubMessageDataWriter_ptr p)
{
  ::CORBA::release (p);
}

DDSPerfTest::PubMessageDataWriter_ptr
TAO::Objref_Traits<DDSPerfTest::PubMessageDataWriter>::nil (void)
{
  return DDSPerfTest::PubMessageDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDSPerfTest::PubMessageDataWriter>::marshal (
    const DDSPerfTest::PubMessageDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDSPerfTest::PubMessageDataWriter::PubMessageDataWriter (void)
{}

DDSPerfTest::PubMessageDataWriter::~PubMessageDataWriter (void)
{
}

void
DDSPerfTest::PubMessageDataWriter::_tao_any_destructor (void *_tao_void_pointer)
{
  PubMessageDataWriter *_tao_tmp_pointer =
    static_cast<PubMessageDataWriter *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

DDSPerfTest::PubMessageDataWriter_ptr
DDSPerfTest::PubMessageDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PubMessageDataWriter::_duplicate (
      dynamic_cast<PubMessageDataWriter_ptr> (_tao_objref)
    );
}

DDSPerfTest::PubMessageDataWriter_ptr
DDSPerfTest::PubMessageDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PubMessageDataWriter::_duplicate (
      dynamic_cast<PubMessageDataWriter_ptr> (_tao_objref)
    );
}

DDSPerfTest::PubMessageDataWriter_ptr
DDSPerfTest::PubMessageDataWriter::_nil (void)
{
  return 0;
}

DDSPerfTest::PubMessageDataWriter_ptr
DDSPerfTest::PubMessageDataWriter::_duplicate (PubMessageDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDSPerfTest::PubMessageDataWriter::_tao_release (PubMessageDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDSPerfTest::PubMessageDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDSPerfTest/PubMessageDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDSPerfTest::PubMessageDataWriter::_interface_repository_id (void) const
{
  return "IDL:DDSPerfTest/PubMessageDataWriter:1.0";
}

::CORBA::Boolean
DDSPerfTest::PubMessageDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_DDSPerfTest_PubMessageDataWriter (
    ::CORBA::tk_local_interface,
    "IDL:DDSPerfTest/PubMessageDataWriter:1.0",
    "PubMessageDataWriter");
  

namespace DDSPerfTest
{
  ::CORBA::TypeCode_ptr const _tc_PubMessageDataWriter =
    &_tao_tc_DDSPerfTest_PubMessageDataWriter;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDSPerfTest::PubMessageDataReader.

DDSPerfTest::PubMessageDataReader_ptr
TAO::Objref_Traits<DDSPerfTest::PubMessageDataReader>::duplicate (
    DDSPerfTest::PubMessageDataReader_ptr p)
{
  return DDSPerfTest::PubMessageDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<DDSPerfTest::PubMessageDataReader>::release (
    DDSPerfTest::PubMessageDataReader_ptr p)
{
  ::CORBA::release (p);
}

DDSPerfTest::PubMessageDataReader_ptr
TAO::Objref_Traits<DDSPerfTest::PubMessageDataReader>::nil (void)
{
  return DDSPerfTest::PubMessageDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDSPerfTest::PubMessageDataReader>::marshal (
    const DDSPerfTest::PubMessageDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDSPerfTest::PubMessageDataReader::PubMessageDataReader (void)
{}

DDSPerfTest::PubMessageDataReader::~PubMessageDataReader (void)
{
}

void
DDSPerfTest::PubMessageDataReader::_tao_any_destructor (void *_tao_void_pointer)
{
  PubMessageDataReader *_tao_tmp_pointer =
    static_cast<PubMessageDataReader *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

DDSPerfTest::PubMessageDataReader_ptr
DDSPerfTest::PubMessageDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PubMessageDataReader::_duplicate (
      dynamic_cast<PubMessageDataReader_ptr> (_tao_objref)
    );
}

DDSPerfTest::PubMessageDataReader_ptr
DDSPerfTest::PubMessageDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PubMessageDataReader::_duplicate (
      dynamic_cast<PubMessageDataReader_ptr> (_tao_objref)
    );
}

DDSPerfTest::PubMessageDataReader_ptr
DDSPerfTest::PubMessageDataReader::_nil (void)
{
  return 0;
}

DDSPerfTest::PubMessageDataReader_ptr
DDSPerfTest::PubMessageDataReader::_duplicate (PubMessageDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDSPerfTest::PubMessageDataReader::_tao_release (PubMessageDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDSPerfTest::PubMessageDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDSPerfTest/PubMessageDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDSPerfTest::PubMessageDataReader::_interface_repository_id (void) const
{
  return "IDL:DDSPerfTest/PubMessageDataReader:1.0";
}

::CORBA::Boolean
DDSPerfTest::PubMessageDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_DDSPerfTest_PubMessageDataReader (
    ::CORBA::tk_local_interface,
    "IDL:DDSPerfTest/PubMessageDataReader:1.0",
    "PubMessageDataReader");
  

namespace DDSPerfTest
{
  ::CORBA::TypeCode_ptr const _tc_PubMessageDataReader =
    &_tao_tc_DDSPerfTest_PubMessageDataReader;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:51



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:464


#ifndef _TAO_TYPECODE_DDSPerfTest_AckMessageSeq_GUARD
#define _TAO_TYPECODE_DDSPerfTest_AckMessageSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        DDSPerfTest_AckMessageSeq_0 (
          ::CORBA::tk_sequence,
          &DDSPerfTest::_tc_AckMessage,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_DDSPerfTest_AckMessageSeq_0 =
        &DDSPerfTest_AckMessageSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_DDSPerfTest_AckMessageSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DDSPerfTest_AckMessageSeq (
    ::CORBA::tk_alias,
    "IDL:DDSPerfTest/AckMessageSeq:1.0",
    "AckMessageSeq",
    &TAO::TypeCode::tc_DDSPerfTest_AckMessageSeq_0);
  

namespace DDSPerfTest
{
  ::CORBA::TypeCode_ptr const _tc_AckMessageSeq =
    &_tao_tc_DDSPerfTest_AckMessageSeq;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDSPerfTest::AckMessageTypeSupport.

DDSPerfTest::AckMessageTypeSupport_ptr
TAO::Objref_Traits<DDSPerfTest::AckMessageTypeSupport>::duplicate (
    DDSPerfTest::AckMessageTypeSupport_ptr p)
{
  return DDSPerfTest::AckMessageTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<DDSPerfTest::AckMessageTypeSupport>::release (
    DDSPerfTest::AckMessageTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

DDSPerfTest::AckMessageTypeSupport_ptr
TAO::Objref_Traits<DDSPerfTest::AckMessageTypeSupport>::nil (void)
{
  return DDSPerfTest::AckMessageTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDSPerfTest::AckMessageTypeSupport>::marshal (
    const DDSPerfTest::AckMessageTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDSPerfTest::AckMessageTypeSupport::AckMessageTypeSupport (void)
{}

DDSPerfTest::AckMessageTypeSupport::~AckMessageTypeSupport (void)
{
}

void
DDSPerfTest::AckMessageTypeSupport::_tao_any_destructor (void *_tao_void_pointer)
{
  AckMessageTypeSupport *_tao_tmp_pointer =
    static_cast<AckMessageTypeSupport *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

DDSPerfTest::AckMessageTypeSupport_ptr
DDSPerfTest::AckMessageTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AckMessageTypeSupport::_duplicate (
      dynamic_cast<AckMessageTypeSupport_ptr> (_tao_objref)
    );
}

DDSPerfTest::AckMessageTypeSupport_ptr
DDSPerfTest::AckMessageTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AckMessageTypeSupport::_duplicate (
      dynamic_cast<AckMessageTypeSupport_ptr> (_tao_objref)
    );
}

DDSPerfTest::AckMessageTypeSupport_ptr
DDSPerfTest::AckMessageTypeSupport::_nil (void)
{
  return 0;
}

DDSPerfTest::AckMessageTypeSupport_ptr
DDSPerfTest::AckMessageTypeSupport::_duplicate (AckMessageTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDSPerfTest::AckMessageTypeSupport::_tao_release (AckMessageTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDSPerfTest::AckMessageTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDSPerfTest/AckMessageTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDSPerfTest::AckMessageTypeSupport::_interface_repository_id (void) const
{
  return "IDL:DDSPerfTest/AckMessageTypeSupport:1.0";
}

::CORBA::Boolean
DDSPerfTest::AckMessageTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_DDSPerfTest_AckMessageTypeSupport (
    ::CORBA::tk_local_interface,
    "IDL:DDSPerfTest/AckMessageTypeSupport:1.0",
    "AckMessageTypeSupport");
  

namespace DDSPerfTest
{
  ::CORBA::TypeCode_ptr const _tc_AckMessageTypeSupport =
    &_tao_tc_DDSPerfTest_AckMessageTypeSupport;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDSPerfTest::AckMessageDataWriter.

DDSPerfTest::AckMessageDataWriter_ptr
TAO::Objref_Traits<DDSPerfTest::AckMessageDataWriter>::duplicate (
    DDSPerfTest::AckMessageDataWriter_ptr p)
{
  return DDSPerfTest::AckMessageDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<DDSPerfTest::AckMessageDataWriter>::release (
    DDSPerfTest::AckMessageDataWriter_ptr p)
{
  ::CORBA::release (p);
}

DDSPerfTest::AckMessageDataWriter_ptr
TAO::Objref_Traits<DDSPerfTest::AckMessageDataWriter>::nil (void)
{
  return DDSPerfTest::AckMessageDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDSPerfTest::AckMessageDataWriter>::marshal (
    const DDSPerfTest::AckMessageDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDSPerfTest::AckMessageDataWriter::AckMessageDataWriter (void)
{}

DDSPerfTest::AckMessageDataWriter::~AckMessageDataWriter (void)
{
}

void
DDSPerfTest::AckMessageDataWriter::_tao_any_destructor (void *_tao_void_pointer)
{
  AckMessageDataWriter *_tao_tmp_pointer =
    static_cast<AckMessageDataWriter *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

DDSPerfTest::AckMessageDataWriter_ptr
DDSPerfTest::AckMessageDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AckMessageDataWriter::_duplicate (
      dynamic_cast<AckMessageDataWriter_ptr> (_tao_objref)
    );
}

DDSPerfTest::AckMessageDataWriter_ptr
DDSPerfTest::AckMessageDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AckMessageDataWriter::_duplicate (
      dynamic_cast<AckMessageDataWriter_ptr> (_tao_objref)
    );
}

DDSPerfTest::AckMessageDataWriter_ptr
DDSPerfTest::AckMessageDataWriter::_nil (void)
{
  return 0;
}

DDSPerfTest::AckMessageDataWriter_ptr
DDSPerfTest::AckMessageDataWriter::_duplicate (AckMessageDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDSPerfTest::AckMessageDataWriter::_tao_release (AckMessageDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDSPerfTest::AckMessageDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDSPerfTest/AckMessageDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDSPerfTest::AckMessageDataWriter::_interface_repository_id (void) const
{
  return "IDL:DDSPerfTest/AckMessageDataWriter:1.0";
}

::CORBA::Boolean
DDSPerfTest::AckMessageDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_DDSPerfTest_AckMessageDataWriter (
    ::CORBA::tk_local_interface,
    "IDL:DDSPerfTest/AckMessageDataWriter:1.0",
    "AckMessageDataWriter");
  

namespace DDSPerfTest
{
  ::CORBA::TypeCode_ptr const _tc_AckMessageDataWriter =
    &_tao_tc_DDSPerfTest_AckMessageDataWriter;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDSPerfTest::AckMessageDataReader.

DDSPerfTest::AckMessageDataReader_ptr
TAO::Objref_Traits<DDSPerfTest::AckMessageDataReader>::duplicate (
    DDSPerfTest::AckMessageDataReader_ptr p)
{
  return DDSPerfTest::AckMessageDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<DDSPerfTest::AckMessageDataReader>::release (
    DDSPerfTest::AckMessageDataReader_ptr p)
{
  ::CORBA::release (p);
}

DDSPerfTest::AckMessageDataReader_ptr
TAO::Objref_Traits<DDSPerfTest::AckMessageDataReader>::nil (void)
{
  return DDSPerfTest::AckMessageDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDSPerfTest::AckMessageDataReader>::marshal (
    const DDSPerfTest::AckMessageDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDSPerfTest::AckMessageDataReader::AckMessageDataReader (void)
{}

DDSPerfTest::AckMessageDataReader::~AckMessageDataReader (void)
{
}

void
DDSPerfTest::AckMessageDataReader::_tao_any_destructor (void *_tao_void_pointer)
{
  AckMessageDataReader *_tao_tmp_pointer =
    static_cast<AckMessageDataReader *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

DDSPerfTest::AckMessageDataReader_ptr
DDSPerfTest::AckMessageDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AckMessageDataReader::_duplicate (
      dynamic_cast<AckMessageDataReader_ptr> (_tao_objref)
    );
}

DDSPerfTest::AckMessageDataReader_ptr
DDSPerfTest::AckMessageDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AckMessageDataReader::_duplicate (
      dynamic_cast<AckMessageDataReader_ptr> (_tao_objref)
    );
}

DDSPerfTest::AckMessageDataReader_ptr
DDSPerfTest::AckMessageDataReader::_nil (void)
{
  return 0;
}

DDSPerfTest::AckMessageDataReader_ptr
DDSPerfTest::AckMessageDataReader::_duplicate (AckMessageDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDSPerfTest::AckMessageDataReader::_tao_release (AckMessageDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDSPerfTest::AckMessageDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDSPerfTest/AckMessageDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDSPerfTest::AckMessageDataReader::_interface_repository_id (void) const
{
  return "IDL:DDSPerfTest/AckMessageDataReader:1.0";
}

::CORBA::Boolean
DDSPerfTest::AckMessageDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_DDSPerfTest_AckMessageDataReader (
    ::CORBA::tk_local_interface,
    "IDL:DDSPerfTest/AckMessageDataReader:1.0",
    "AckMessageDataReader");
  

namespace DDSPerfTest
{
  ::CORBA::TypeCode_ptr const _tc_AckMessageDataReader =
    &_tao_tc_DDSPerfTest_AckMessageDataReader;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::PubMessageTypeSupport>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::PubMessageTypeSupport>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::PubMessageTypeSupport>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DDSPerfTest
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PubMessageTypeSupport_ptr _tao_elem)
  {
    PubMessageTypeSupport_ptr _tao_objptr =
      PubMessageTypeSupport::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PubMessageTypeSupport_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PubMessageTypeSupport>::insert (
        _tao_any,
        PubMessageTypeSupport::_tao_any_destructor,
        _tc_PubMessageTypeSupport,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PubMessageTypeSupport_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PubMessageTypeSupport>::extract (
          _tao_any,
          PubMessageTypeSupport::_tao_any_destructor,
          _tc_PubMessageTypeSupport,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::PubMessageTypeSupport_ptr _tao_elem)
{
  DDSPerfTest::PubMessageTypeSupport_ptr _tao_objptr =
    DDSPerfTest::PubMessageTypeSupport::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::PubMessageTypeSupport_ptr *_tao_elem)
{
  TAO::Any_Impl_T<DDSPerfTest::PubMessageTypeSupport>::insert (
      _tao_any,
      DDSPerfTest::PubMessageTypeSupport::_tao_any_destructor,
      DDSPerfTest::_tc_PubMessageTypeSupport,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DDSPerfTest::PubMessageTypeSupport_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<DDSPerfTest::PubMessageTypeSupport>::extract (
        _tao_any,
        DDSPerfTest::PubMessageTypeSupport::_tao_any_destructor,
        DDSPerfTest::_tc_PubMessageTypeSupport,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::PubMessageDataWriter>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::PubMessageDataWriter>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::PubMessageDataWriter>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DDSPerfTest
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PubMessageDataWriter_ptr _tao_elem)
  {
    PubMessageDataWriter_ptr _tao_objptr =
      PubMessageDataWriter::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PubMessageDataWriter_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PubMessageDataWriter>::insert (
        _tao_any,
        PubMessageDataWriter::_tao_any_destructor,
        _tc_PubMessageDataWriter,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PubMessageDataWriter_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PubMessageDataWriter>::extract (
          _tao_any,
          PubMessageDataWriter::_tao_any_destructor,
          _tc_PubMessageDataWriter,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::PubMessageDataWriter_ptr _tao_elem)
{
  DDSPerfTest::PubMessageDataWriter_ptr _tao_objptr =
    DDSPerfTest::PubMessageDataWriter::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::PubMessageDataWriter_ptr *_tao_elem)
{
  TAO::Any_Impl_T<DDSPerfTest::PubMessageDataWriter>::insert (
      _tao_any,
      DDSPerfTest::PubMessageDataWriter::_tao_any_destructor,
      DDSPerfTest::_tc_PubMessageDataWriter,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DDSPerfTest::PubMessageDataWriter_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<DDSPerfTest::PubMessageDataWriter>::extract (
        _tao_any,
        DDSPerfTest::PubMessageDataWriter::_tao_any_destructor,
        DDSPerfTest::_tc_PubMessageDataWriter,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::PubMessageDataReader>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::PubMessageDataReader>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::PubMessageDataReader>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DDSPerfTest
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PubMessageDataReader_ptr _tao_elem)
  {
    PubMessageDataReader_ptr _tao_objptr =
      PubMessageDataReader::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PubMessageDataReader_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PubMessageDataReader>::insert (
        _tao_any,
        PubMessageDataReader::_tao_any_destructor,
        _tc_PubMessageDataReader,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PubMessageDataReader_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PubMessageDataReader>::extract (
          _tao_any,
          PubMessageDataReader::_tao_any_destructor,
          _tc_PubMessageDataReader,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::PubMessageDataReader_ptr _tao_elem)
{
  DDSPerfTest::PubMessageDataReader_ptr _tao_objptr =
    DDSPerfTest::PubMessageDataReader::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::PubMessageDataReader_ptr *_tao_elem)
{
  TAO::Any_Impl_T<DDSPerfTest::PubMessageDataReader>::insert (
      _tao_any,
      DDSPerfTest::PubMessageDataReader::_tao_any_destructor,
      DDSPerfTest::_tc_PubMessageDataReader,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DDSPerfTest::PubMessageDataReader_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<DDSPerfTest::PubMessageDataReader>::extract (
        _tao_any,
        DDSPerfTest::PubMessageDataReader::_tao_any_destructor,
        DDSPerfTest::_tc_PubMessageDataReader,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::AckMessageTypeSupport>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::AckMessageTypeSupport>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::AckMessageTypeSupport>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DDSPerfTest
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AckMessageTypeSupport_ptr _tao_elem)
  {
    AckMessageTypeSupport_ptr _tao_objptr =
      AckMessageTypeSupport::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AckMessageTypeSupport_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AckMessageTypeSupport>::insert (
        _tao_any,
        AckMessageTypeSupport::_tao_any_destructor,
        _tc_AckMessageTypeSupport,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AckMessageTypeSupport_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AckMessageTypeSupport>::extract (
          _tao_any,
          AckMessageTypeSupport::_tao_any_destructor,
          _tc_AckMessageTypeSupport,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::AckMessageTypeSupport_ptr _tao_elem)
{
  DDSPerfTest::AckMessageTypeSupport_ptr _tao_objptr =
    DDSPerfTest::AckMessageTypeSupport::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::AckMessageTypeSupport_ptr *_tao_elem)
{
  TAO::Any_Impl_T<DDSPerfTest::AckMessageTypeSupport>::insert (
      _tao_any,
      DDSPerfTest::AckMessageTypeSupport::_tao_any_destructor,
      DDSPerfTest::_tc_AckMessageTypeSupport,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DDSPerfTest::AckMessageTypeSupport_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<DDSPerfTest::AckMessageTypeSupport>::extract (
        _tao_any,
        DDSPerfTest::AckMessageTypeSupport::_tao_any_destructor,
        DDSPerfTest::_tc_AckMessageTypeSupport,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::AckMessageDataWriter>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::AckMessageDataWriter>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::AckMessageDataWriter>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DDSPerfTest
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AckMessageDataWriter_ptr _tao_elem)
  {
    AckMessageDataWriter_ptr _tao_objptr =
      AckMessageDataWriter::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AckMessageDataWriter_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AckMessageDataWriter>::insert (
        _tao_any,
        AckMessageDataWriter::_tao_any_destructor,
        _tc_AckMessageDataWriter,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AckMessageDataWriter_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AckMessageDataWriter>::extract (
          _tao_any,
          AckMessageDataWriter::_tao_any_destructor,
          _tc_AckMessageDataWriter,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::AckMessageDataWriter_ptr _tao_elem)
{
  DDSPerfTest::AckMessageDataWriter_ptr _tao_objptr =
    DDSPerfTest::AckMessageDataWriter::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::AckMessageDataWriter_ptr *_tao_elem)
{
  TAO::Any_Impl_T<DDSPerfTest::AckMessageDataWriter>::insert (
      _tao_any,
      DDSPerfTest::AckMessageDataWriter::_tao_any_destructor,
      DDSPerfTest::_tc_AckMessageDataWriter,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DDSPerfTest::AckMessageDataWriter_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<DDSPerfTest::AckMessageDataWriter>::extract (
        _tao_any,
        DDSPerfTest::AckMessageDataWriter::_tao_any_destructor,
        DDSPerfTest::_tc_AckMessageDataWriter,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::AckMessageDataReader>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::AckMessageDataReader>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<DDSPerfTest::AckMessageDataReader>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DDSPerfTest
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AckMessageDataReader_ptr _tao_elem)
  {
    AckMessageDataReader_ptr _tao_objptr =
      AckMessageDataReader::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AckMessageDataReader_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AckMessageDataReader>::insert (
        _tao_any,
        AckMessageDataReader::_tao_any_destructor,
        _tc_AckMessageDataReader,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AckMessageDataReader_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AckMessageDataReader>::extract (
          _tao_any,
          AckMessageDataReader::_tao_any_destructor,
          _tc_AckMessageDataReader,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::AckMessageDataReader_ptr _tao_elem)
{
  DDSPerfTest::AckMessageDataReader_ptr _tao_objptr =
    DDSPerfTest::AckMessageDataReader::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    DDSPerfTest::AckMessageDataReader_ptr *_tao_elem)
{
  TAO::Any_Impl_T<DDSPerfTest::AckMessageDataReader>::insert (
      _tao_any,
      DDSPerfTest::AckMessageDataReader::_tao_any_destructor,
      DDSPerfTest::_tc_AckMessageDataReader,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    DDSPerfTest::AckMessageDataReader_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<DDSPerfTest::AckMessageDataReader>::extract (
        _tao_any,
        DDSPerfTest::AckMessageDataReader::_tao_any_destructor,
        DDSPerfTest::_tc_AckMessageDataReader,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

