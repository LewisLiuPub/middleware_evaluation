// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file DDSPerfTest.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DDSPERFTEST_DDSPERFTEST_H_
#define _DDSPERFTEST_DDSPERFTEST_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DDSPerfTest_SOURCE)
#define DDSPerfTest_DllAPI __declspec( dllexport )
#else
#define DDSPerfTest_DllAPI __declspec( dllimport )
#endif // DDSPerfTest_SOURCE
#else
#define DDSPerfTest_DllAPI
#endif
#else
#define DDSPerfTest_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace DDSPerfTest
{
    typedef std::vector<uint8_t> BufferType;
    /*!
     * @brief This class represents the structure PubMessage defined by the user in the IDL file.
     * @ingroup DDSPERFTEST
     */
    class PubMessage
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PubMessage();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PubMessage();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object DDSPerfTest::PubMessage that will be copied.
         */
        eProsima_user_DllExport PubMessage(const PubMessage &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object DDSPerfTest::PubMessage that will be copied.
         */
        eProsima_user_DllExport PubMessage(PubMessage &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object DDSPerfTest::PubMessage that will be copied.
         */
        eProsima_user_DllExport PubMessage& operator=(const PubMessage &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object DDSPerfTest::PubMessage that will be copied.
         */
        eProsima_user_DllExport PubMessage& operator=(PubMessage &&x);
        
        /*!
         * @brief This function copies the value in member buffer
         * @param _buffer New value to be copied in member buffer
         */
        inline eProsima_user_DllExport void buffer(const DDSPerfTest::BufferType &_buffer)
        {
            m_buffer = _buffer;
        }

        /*!
         * @brief This function moves the value in member buffer
         * @param _buffer New value to be moved in member buffer
         */
        inline eProsima_user_DllExport void buffer(DDSPerfTest::BufferType &&_buffer)
        {
            m_buffer = std::move(_buffer);
        }

        /*!
         * @brief This function returns a constant reference to member buffer
         * @return Constant reference to member buffer
         */
        inline eProsima_user_DllExport const DDSPerfTest::BufferType& buffer() const
        {
            return m_buffer;
        }

        /*!
         * @brief This function returns a reference to member buffer
         * @return Reference to member buffer
         */
        inline eProsima_user_DllExport DDSPerfTest::BufferType& buffer()
        {
            return m_buffer;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const DDSPerfTest::PubMessage& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        DDSPerfTest::BufferType m_buffer;
    };
    /*!
     * @brief This class represents the structure AckMessage defined by the user in the IDL file.
     * @ingroup DDSPERFTEST
     */
    class AckMessage
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport AckMessage();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~AckMessage();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object DDSPerfTest::AckMessage that will be copied.
         */
        eProsima_user_DllExport AckMessage(const AckMessage &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object DDSPerfTest::AckMessage that will be copied.
         */
        eProsima_user_DllExport AckMessage(AckMessage &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object DDSPerfTest::AckMessage that will be copied.
         */
        eProsima_user_DllExport AckMessage& operator=(const AckMessage &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object DDSPerfTest::AckMessage that will be copied.
         */
        eProsima_user_DllExport AckMessage& operator=(AckMessage &&x);
        
        /*!
         * @brief This function sets a value in member size
         * @param _size New value for member size
         */
        inline eProsima_user_DllExport void size(int32_t _size)
        {
            m_size = _size;
        }

        /*!
         * @brief This function returns the value of member size
         * @return Value of member size
         */
        inline eProsima_user_DllExport int32_t size() const
        {
            return m_size;
        }

        /*!
         * @brief This function returns a reference to member size
         * @return Reference to member size
         */
        inline eProsima_user_DllExport int32_t& size()
        {
            return m_size;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const DDSPerfTest::AckMessage& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        int32_t m_size;
    };
}

#endif // _DDSPERFTEST_DDSPERFTEST_H_